@page "/personas"
@inject IRepositorio repositorio
@inject IMostrarMensajes mostrarMensajes
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "admin")]


<ListadoGenerico Listado="Personas">
    <HayRegistrosCompleto>
        <MudText Typo="Typo.h3">Indice Personas</MudText>
        <MudTable Items="@Personas" Dense="@dense" Hover="@hover" Bordered="@bordered">
            <ToolBarContent>
                <MudButton @onclick="IrCrearPersona" Variant="Variant.Filled" Color="Color.Info">Crear Personas</MudButton>
                <MudSpacer />
            </ToolBarContent>
            <HeaderContent>
                <MudTh></MudTh>
                <MudTh>Nombre</MudTh>
                <MudTh>Fecha De Nacimiento</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudIconButton @onclick="@(() => Ver(context))" Icon="@Icons.Rounded.RemoveRedEye" Color="Color.Primary" />
                    <MudButton @onclick="@(() => IrEditarPersonas(context.Id))" Variant="Variant.Filled" Color="Color.Success">Editar</MudButton>
                    <MudIconButton @onclick="@(() => BorrarPersona(context))" Icon="@Icons.Rounded.Delete" Color="Color.Error" />
                </MudTd>
                <MudTd DataLabel="Nombre">@context.Nombre</MudTd>
                <MudTd DataLabel="Fecha De Nacimiento">@context.FechaNacimiento</MudTd>
            </RowTemplate>
            <PagerContent>
                <Paginacion PaginaActual="paginaActual" PaginaSeleccionada="paginaSeleccionada"
                            PaginasTotales="paginasTotales"></Paginacion>
            </PagerContent>
        </MudTable>

    </HayRegistrosCompleto>
</ListadoGenerico>

@code {
    public List<Persona> Personas { get; set; }
    private int paginaActual = 1;
    private int paginasTotales;

    protected async override Task OnInitializedAsync()
    {
        await Cargar();
    }

    private async Task paginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await Cargar(pagina);
    }

    private async Task Cargar(int pagina = 1)
    {
        var responseHttp = await repositorio.Get<List<Persona>>($"api/personas?pagina={pagina}");
        if (!responseHttp.Error)
        {
            Personas = responseHttp.Response;
            var conteo = responseHttp.HttpResponseMessage.Headers.GetValues("conteo").FirstOrDefault();
            paginasTotales = int.Parse(responseHttp.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());
        }
    }

    private async Task BorrarPersona(Persona persona)
    {
        var responseHttp = await repositorio.Delete($"api/personas/{persona.Id}");
        if (responseHttp.Error)
        {
            await mostrarMensajes.MostrarMensajeError(await responseHttp.GetBody());
        }
        else
        {
            await Cargar();
        }

    }

    private bool dense = true;
    private bool hover = true;
    private bool bordered = true;

    private void IrCrearPersona()
    {
        navigationManager.NavigateTo("personas/crear");
    }
    private void IrEditarPersonas(int id)
    {
        navigationManager.NavigateTo($"personas/editar/{id}");
    }
    private void Ver(Persona persona)
    {
        navigationManager.NavigateTo($"personas/ver/{persona.Id}");
    }
}